# Create ece-info ilm policy
PUT _ilm/policy/ece-info
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            "max_primary_shard_size": "50gb"
          }
        }
      },
      "delete": {
        "min_age": "735d",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}

# Creates a component template for mappings
PUT _component_template/ece-info-mappings
{
  "template": {
    "mappings": {
      "dynamic_templates": [
        {
          "strings_as_keywords": {
            "match_mapping_type": "string",
            "mapping": {
              "type": "keyword"
            }
          }
        }
      ],
      "properties": {
        "@timestamp": {
          "type": "date",
          "format": "date_optional_time||epoch_millis"
        },
        "data_type": {
          "type": "keyword"
        },
        "cluster_name": {
          "type": "keyword"
        },
        "usage_type": {
          "type": "keyword"
        },
        "category": {
          "type": "keyword"
        },
        "name": {
          "type": "keyword",
          "fields": {
            "text": {
              "type": "text"
            }
          }
        }
      }
    }
  },
  "_meta": {
    "description": "Mappings for ece-info"
  }
}

# Creates a component template for license mappings
PUT _component_template/ece-info-license-mappings
{
  "template": {
    "mappings": {
      "dynamic_templates": [
        {
          "date_in_miliseconds_as_timestamp": {
            "match_mapping_type": "long",
            "match": "*_date_in_millis",
            "mapping": {
              "type": "date",
              "format": "epoch_millis"
            }
          }
        }
      ],
      "properties": {
        "license.cluster_licenses": {
          "type": "nested"
        }
      }
    }
  },
  "_meta": {
    "description": "ece-info license specific mappings"
  }
}

# Creates a component template for deployment mappings
PUT _component_template/ece-info-deployment-mappings
{
  "template": {
    "mappings": {
      "dynamic_templates": [
        {
          "dont_index_associated_kibana_clusters": {
            "path_match":   "*.info.associated_kibana_clusters",
            "mapping": {
              "type": "object",
              "enabled": false
            }
          }   
        },
        {
          "dont_index_associated_apm_clusters": {
            "path_match":  "*.info.associated_apm_clusters",
            "mapping": {
              "type": "object",
              "enabled": false
            }
          }   
        },
        {
          "dont_index_associated_appsearch_clusters": {
            "path_match":   "*.info.associated_appsearch_clusters",
            "mapping": {
              "type": "object",
              "enabled": false
            }
          }   
        },        
        {
          "dont_index_user_settings_json": {
            "path_match":   "*.elasticsearch.user_settings_json",
            "mapping": {
              "type": "object",
              "enabled": false
            }
          }   
        },
        {
          "dont_index_user_settings_override_json": {
            "path_match":   "*.elasticsearch.user_settings_override_json",
            "mapping": {
              "type": "object",
              "enabled": false
            }
          }   
        },        
        {
          "dont_index_external_links": {
            "path_match":   "*.info.external_links",
            "mapping": {
              "type": "object",
              "enabled": false
            }
          }   
        }
      ]
    }
  },
  "_meta": {
    "description": "ece-info license specific mappings"
  }
}

# Creates a component template for index settings
PUT _component_template/ece-info-settings
{
  "template": {
    "settings": {
      "index.lifecycle.name": "ece-info"
    }
  },
  "_meta": {
    "description": "Settings for ece-info"
  }
}

# Creates template
PUT _index_template/ece-info-index-template
{
  "index_patterns": ["ece-info"],
  "data_stream": { },
  "composed_of": [ "ece-info-mappings", "ece-info-license-mappings", "ece-info-deployment-mappings", "ece-info-settings" ],
  "priority": 500,
  "_meta": {
    "description": "Template for ece-info"
  }
}

# Creates API key
POST /_security/api_key
{
  "name": "ece-license-information-api-key",
  "role_descriptors": { 
    "append-index-ece-information": {
      "cluster": [],
      "index": [
        {
          "names": ["ece-info"],
          "privileges": ["auto_configure", "create_doc"]
        }
      ]
    }
  }
}

PUT _ingest/pipeline/collect-ece-license-info
{
  "description": "pipeline to process ece-license-info",
  "processors": [
    {
      "set": {
        "description": "Set message type for filtering/quering",
        "field": "data_type",
        "value": "ece-license-info"
      }
    }
  ]
}

# Create index for lookup of usage_type
PUT deploymentname-usage_type
{
  "mappings": {
    "properties": {
      "name": { "type": "keyword" },
      "usage_type": { "type": "keyword" }
    }
  }
}
# Create enrich policy for lookup of usage_type
PUT _enrich/policy/deploymentname-usage_type-policy
{
  "match": {
    "indices": "deploymentname-usage_type",
    "match_field": "name",
    "enrich_fields": ["usage_type"]
  }
}
# execute policy to prep lookup index for usage_type
POST /_enrich/policy/deploymentname-usage_type-policy/_execute

# Create index for lookup of category
PUT deploymentname-category
{
  "mappings": {
    "properties": {
      "name": { "type": "keyword" },
      "category": { "type": "keyword" }
    }
  }
}
# add entry for system cluster
POST /deploymentname-category/_doc/logging-and-metrics
{
  "name": "logging-and-metrics",
  "category": "system"
}
POST /deploymentname-category/_doc/admin-console-elasticsearch
{
  "name": "admin-console-elasticsearch",
  "category": "system"
}
POST /deploymentname-category/_doc/security-cluster
{
  "name": "security-cluster",
  "category": "system"
}
POST /deploymentname-category/_doc/security-cluster
{
  "name": "security",
  "category": "system"
}

# Create enrich policy for lookup of category
PUT _enrich/policy/deploymentname-category-policy
{
  "match": {
    "indices": "deploymentname-category",
    "match_field": "name",
    "enrich_fields": ["category"]
  }
}
# execute policy to prep lookup index for category
POST _enrich/policy/deploymentname-category-policy/_execute

PUT _ingest/pipeline/collect-ece-deployments
{
  "description": "pipeline to process ece-deployments",
  "processors": [
    {
      "set": {
        "description": "Set message type for filtering/quering",
        "field": "data_type",
        "value": "ece-deployment"
      }
    },
    {
      "script": {
        "description": "Extract memory usage for deployment",
        "lang": "painless",
        "source": """
          ctx['memory_usage'] = 0;
          ctx['memory_usage'] += ctx.resources?.elasticsearch?.stream()
            ?.flatMap(resource -> resource?.info?.topology?.instances?.stream())
            ?.mapToInt(instance -> Optional.ofNullable(instance?.memory?.instance_capacity).orElse(0))
            ?.sum() ?: 0;
          ctx['memory_usage'] += ctx.resources?.kibana?.stream()
            ?.flatMap(resource -> resource?.info?.topology?.instances?.stream())
            ?.mapToInt(instance -> Optional.ofNullable(instance?.memory?.instance_capacity).orElse(0))
            ?.sum() ?: 0;
          ctx['memory_usage'] += ctx.resources?.apm?.stream()
            ?.flatMap(resource -> resource?.info?.topology?.instances?.stream())
            ?.mapToInt(instance -> Optional.ofNullable(instance?.memory?.instance_capacity).orElse(0))
            ?.sum() ?: 0;
          ctx['memory_usage'] += ctx.resources?.appsearch?.stream()
            ?.flatMap(resource -> resource?.info?.topology?.instances?.stream())
            ?.mapToInt(instance -> Optional.ofNullable(instance?.memory?.instance_capacity).orElse(0))
            ?.sum() ?: 0;
          ctx['memory_usage'] += ctx.resources?.integrations_server?.stream()
            ?.flatMap(resource -> resource?.info?.topology?.instances?.stream())
            ?.mapToInt(instance -> Optional.ofNullable(instance?.memory?.instance_capacity).orElse(0))
            ?.sum() ?: 0;
        """
      }
    },
    {
      "enrich": {
        "description": "Add 'usage_type' data based on deployment name",
        "policy_name": "deploymentname-usage_type-policy",
        "field": "name",
        "target_field": "found-usage_type",
        "max_matches": "1"
      }
    },
    {
      "rename": {
        "field": "found-usage_type.usage_type",
        "target_field": "usage_type",
        "on_failure": [
          {
            "set": {
              "field": "usage_type",
              "value": "unidentified",
              "override": false
            }
          }
        ]
      }
    },
    {
      "enrich": {
        "description": "Add 'category' data based on deployment name",
        "policy_name": "deploymentname-category-policy",
        "field": "name",
        "target_field": "found-category",
        "max_matches": "1"
      }
    },
    {
      "rename": {
        "field": "found-category.category",
        "target_field": "category",
        "on_failure": [
          {
            "set": {
              "field": "category",
              "value": "unidentified",
              "override": false
            }
          }
        ]
      }
    }
  ]
}


# build transform that maintains the latest status
PUT _transform/ece-info-deployments-latest-status
{
  "source": {
    "index": [
      "ece-info"
    ],
    "query": { 
      "bool": {
        "filter": [
          { "term":  { "data_type": "ece-deployment" } }
        ]
      }
    }
  },
  "latest": {
    "unique_key": [
      "cluster_name",
      "id"
    ],
    "sort": "@timestamp"
  },
  "description": "maintains the latest entry of a deployment",
  "dest": {
    "index": "ece-info-deployments-latest-status"
  },
  "sync": {
    "time": {
      "field": "@timestamp"
    }
  },
  "retention_policy": {
    "time": {
      "field": "@timestamp",
      "max_age": "1d"
    }
  }
}
# Creates template for transform index
PUT _index_template/ece-info-deployments-latest-status-index-template
{
  "index_patterns": ["ece-info-deployments-latest-status"],
  "composed_of": [ "ece-info-mappings" ],
  "priority": 500,
  "_meta": {
    "description": "Template for ece-info-deployments-latest-status"
  }
}
POST _transform/ece-info-deployments-latest-status/_start

PUT _transform/ece-info-license-latest-status
{
  "source": {
    "index": [
      "ece-info"
    ],
    "query": {
      "bool": {
        "should": [
          {
            "match_phrase": {
              "data_type": "ece-license-info"
            }
          }
        ],
        "minimum_should_match": 1
      }
    }
  },
  "latest": {
    "unique_key": [
      "cluster_name"
    ],
    "sort": "@timestamp"
  },
  "description": "maintains the latest entry of license info",
  "dest": {
    "index": "ece-info-license-latest-status"
  },
  "sync": {
    "time": {
      "field": "@timestamp"
    }
  }
}
# Creates template for transform index
PUT _index_template/ece-info-license-latest-status-index-template
{
  "index_patterns": ["ece-info-license-latest-status"],
  "composed_of": [ "ece-info-mappings" ],
  "priority": 500,
  "_meta": {
    "description": "Template for ece-info-license-latest-status"
  }
}
POST _transform/ece-info-license-latest-status/_start